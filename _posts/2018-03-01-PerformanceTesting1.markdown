---
layout: post
title: "Performance Testing Guidance for Web Applications Chapter 1  요약"
date: 2018-03-01
categories:
---

# Chapter 1 – Fundamentals of Web Application Performance Testing 

## 성능 테스트 방법 
다음의 순서로 성능 테스트가 진행됩니다.
1. 테스트 환경 확인하기
2. 성과 수용 기준 확인하기
3. 계획 및 설계 테스트
4. 테스트 환경 구성하기
5. 테스트 설계 구현
6. 테스트 실행
7. 분석, 정리 및 다시 테스트

## 성능 테스트를 해야 하는 이유
성능 테스트를 하는 이유는 출시 전 성능을 예측하여 어떻게 성능 문제를 해결할 지 미리 알 수 있고 확장성, 안전성 문제로 인해 생길 문제를 미리 알 수 있습니다. 또한 인프라 가 적합한지도 테스트를 통해 알 수 있고 소프트웨어 성능의 적절성과 어플리케이션의 병목 현상도 미리 알 수 있습니다.

## 프로젝트 컨텍스트
성능 테스트가 성공하려면 성능 테스트 방법이 프로젝트의 내용과 관련이 있어야합니다. 성능 테스트는 프로젝트의 비전을 이해하고 시작해야 하며 시스템의 목적을 확실히 알고 진행해야합니다. 또한 고객의 기대를 유의해야 하고 비지니스 요구사항을 충족시키는 것도 중요합니다. 성능 테스트를 하는 이유도 이해 해야하며, 프로젝트와 관련된 규제, 요구 사항을 이해해야 하고 프로젝트의 일정에 맞게 진행 되어야합니다.

## 성능 테스트와 튜닝의 관계
튜닝은 성능 테스터의 직접적인 책임은 아니지만 협업을 하여 진행하는 것이 가장 효과적입니다. 튜닝은 일반적으로 다양한 조건에서 테스트를 하여 모니터링을 해야 하기 때문에 성능 테스터가 협력하는 팀의 핵심이 됩니다.

## 성능, 부하 및 스트레스 테스트
성능 테스트는 성능 테스트, 부하 테스트, 스트레스 테스트 중 하나에 속해 있습니다. 성능 테스트는 시스켐의 속도, 확장성, 안정성 들의 유효성을 검사합니다.
부하 테스트는 생산 작업 중에 예상되는 부하 가 생길 때 테스트 중인 시스템 또는 응용 프로그램의 성능 특성을 결정하거나 검증하는 데 초점을 맞춘 테스트입니다.
스트레스 테스트는 생산, 운영 중에 예상되는 조건을 초과 할 경우 테스트중인 시스템 또는 응용 프로그램의 성능 특성을 결정하거나 유효성을 검증하는 데 초점을 맞춘 테스트입니다.

## 베이스 라인
베이스 라인을 만드는 것은 성능 향상을 위한 후속 변경의 효과를 평가하는 것이 목적입니다. 베이스 라인은 미래에 최적화의 비교 기준이 될 수 있습니다. 베이스 라인은 재사용이 가능해야 하며, 나중에 재정의 될 수 있습니다.

## 벤치 마킹
다른 조직과 비교하기 위한 테스트로 업계 표준을 준수해야 하며 다양한 측정을 해야합니다.

## 참조
Performance Testing Guidance for Web Applications
